#!/usr/bin/env bash
# kiln - A client side only, Helm compatible, package manager for Kubernetes.
# 
# Run kiln --help for more information

progname="$(basename $0)"

# If help argument
if [[ "$1" =~ (--help|-h) || -z "$1" ]]; then
	"$PAGER" << EOF
$progname - A client side only, Helm compatible, package manager for Kubernetes

OVERVIEW

	A tool for managing Helm charts without a Tiller server. Locally 
	prepares resource configuration files and deploys with kubectl.

USAGE

	$progname COMMAND [--help,-h] [--namespace,-n NAMESPACE] [ARGUMENTS...] [OPTIONS...]

	Note: The order that ARGUMENTS... and OPTIONS... apear does not matter

ARGUMENTS

	COMMAND         Sub command to run. See COMMANDS section
	ARGUMENTS...    Sub command arguments. See COMMANDS section

OPTIONS

	--help,-h                   Show help text in pager
	--namespace,-n NAMESPACE    Namespace to deploy resources in
	OPTIONS...                  Sub command options. See COMMANDS section

COMMANDS

	Valid COMMAND argument values:

		up      Deploy Helm chart. See UP_COMMAND section
		wait    Wait for a deployment to finish. See WAIT_COMMAND section

UP_COMMAND

	USAGE

		$progname up [--values-file,-f VALUES_FILE] CHART_PATH
		
	ARGUMENTS

		CHART_PATH    Path to Helm chart. See CHART_PATHS section

	OPTIONS

		--values-file,-f VALUES_FILE    Additional Helm values file. This arugment can
		                                be provided multiple times.

WAIT_COMMAND

	USAGE

		$progname wait DEPLOYMENT

	ARGUMENTS

		DEPLOYMENT    Name of deployment to wait for

CHART_PATHS

	A chart path specifies the location of a Helm chart.  

	This can either be a local directory or location in a repository.

	If a chart path is a chart in a repository it will be downloaded and 
	unpacked in $KILN_TMP_DIR. See GLOBAL_CONFIGURATION section.

GLOBAL_CONFIGURATION

	The $progname script can be configured with these environment variables:

		KILN_TMP_DIR    Directory to place temporary files. Defaults 
		                to /var/tmp.

DEPENDENCIES

	The helm, kubectl, and GNU sed executables must be present.
EOF

	exit 1
fi

# Check for dependencies
if ! which helm &> /dev/null; then
	echo "Error: helm executable must be in path" >&2
	exit 1
fi

if ! which kubectl &> /dev/null; then
	echo "Error: kubectl executable must be in path" >&2
	exit 1
fi

if ! sed --version | grep GNU &> /dev/null; then
	echo "Error: GNU sed executable must be in path with name \"sed\"" >&2
	exit 1
fi

# Global configuration
if [ -z "$KILN_TMP_DIR" ]; then
	KILN_TMP_DIR="/var/tmp"
fi

# Return location of helm chart. If chart in a directory simply return the 
# path. If chart is in a repository download the chart and unpack it, then 
# return the path.
#
# ARGUMENTS
#
#	1. CHART_PATH    Chart path value to resolve
#
# RETURNS
#
#	Path to chart directory on file system
resolve_chart_path() {
	# Check arguments
	if [ -z "$1" ]; then
		echo "Error: CHART_PATH argument must be provided" >&2
		return 1
	fi
	chart_path="$1"

	# Check if directory
	if [ -d "$chart_path" ]; then
		echo "$chart_path"
		return 0
	fi

	# Otherwise try and download from repository
	normal_chart_path=$(echo "$chart_path" | sed 's/ /-/g')
	if ! helm fetch --untar --untardir "$KILN_TMP_DIR/$normal_chart_path" "$chart_path"; then
		echo "Error: Failed to fetch \"$chart_path\"" >&2
		return 1
	fi
	echo "$KILN_TMP_DIR/$normal_chart_path"
	return 0
}

# Deploy Helm chart
#
# ARGUMENTS
#
#	1. CHART_PATH      Path to Helm chart
#	3. VALUES_FILES    (Optional) Additional Helm values file locations
#	                   separated by spaces
up_command() {
	# Check arguments
	# ... CHART_PATH
	if [ -z "$1" ]; then
		echo "Error: CHART_PATH argument must be provided" >&2
		exit 1
	fi
	chart_path=$(resolve_chart_path "$1")

	if [[ "$?" != "0" ]]; then
		echo "Error: Failed to resolve CHART_PATH" >&2
		exit 1
	fi

	# ... VALUES_FILES
	helm_args=""
	if [ ! -z "$2" ]; then
		values_files=("$2")
		for values_file in "${values_files[@]}"; do
			helm_args="$helm_args -f $values_file"
		done
	fi

	# Set kubectl args if namespace set
	if [ ! -z "$KILN_NAMESPACE" ]; then
		kubectl_args="--namespace $KILN_NAMESPACE"
	fi

	# Render Helm templates
	templates=$(helm template $helm_args "$chart_path")

	if [[ "$?" != "0" ]]; then
		echo "Error: Failed to render Helm templates" >&2
		exit 1
	fi

	# Check if namespace needs to be created
	if [ ! -z "$KILN_NAMESPACE" ]; then
		if ! kubectl get namespaces | grep "$KILN_NAMESPACE"; then
			if ! kubectl create namespace "$KILN_NAMESPACE"; then
				echo "Error: Failed to create \"$KILN_NAMESPACE\" namespace" >&2
				exit 1
			fi
		fi
	fi

	# Deploy
	echo "$templates" | kubectl apply $kubectl_args -f -

	if [[ "$?" != "0" ]]; then
		echo "Error: Failed to deploy" >&2
		exit 1
	fi
}

# Wait for deployment to complete
#
# ARGUMENTS
#
#	1. DEPLOYMENT    Name of deployment to wait for
wait_command() {
	# Check arguments
	if [ -z "$1" ]; then
		echo "Error: DEPLOYMENT argument must be provided" >&2
		exit 1
	fi
	deployment="$1"

	# Set kubectl args if namespace set
	if [ ! -z "$KILN_NAMESPACE" ]; then
		kubectl_args="--namespace $KILN_NAMESPACE"
	fi

	# Wait
	if ! kubectl $kubectl_args rollout status deployment "$deployment"; then
		echo "Error: Failed to wait for deployment \"$deployment\" to rollout" >&2
		exit 1
	fi
}

# Run command
while [ ! -z "$1" ]; do
	case "$1" in
		up)
			cmd="up"
			shift

			while [ ! -z "$1" ]; do
				case "$1" in	
					--values-file|-f)
						shift
						up_values_files="$up_values_files $1"
						shift
						;;

					*)
						up_chart_path="$1"
						shift
						;;
				esac
			done
			;;

		wait)
			cmd="wait"
			shift

			deployment="$1"
			shift
			;;

		--namespace|-n)
			# Exports KILN_NAMESPACE which is used globally 
			# in commands
			shift
			KILN_NAMESPACE="$1"
			shift
			;;
		
		*)
			echo "Error: Unknown command \"$1\"" >&2
			exit 1
			;;
	esac
done

case "$cmd" in
	up)
		up_command "$up_chart_path" "$up_values_files"
		;;

	wait)

		wait_command "$deployment"
		;;
esac

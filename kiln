#!/usr/bin/env bash
# kiln - A client side only, Helm compatible, package manager for Kubernetes.
# 
# Run kiln --help for more information

progname="$(basename $0)"

# If help argument
if [[ "$1" =~ (--help|-h) || -z "$1" ]]; then
	cat << EOF
$progname - A client side only, Helm compatible, package manager for Kubernetes

OVERVIEW

	A tool for managing Helm charts without a Tiller server. Locally 
	prepares resource configuration files and deploys with kubectl.

USAGE

	$progname COMMAND [ARGUMENTS...] [OPTIONS...]

	Note: The order that ARGUMENTS... and OPTIONS... apear does not matter

ARGUMENTS

	COMMAND         Sub command to run. See COMMANDS section
	ARGUMENTS...    Sub command arguments. See COMMANDS section

OPTIONS

	OPTIONS...    Sub command options. See COMMANDS section

COMMANDS

	Valid COMMAND argument values:

		up    Deploy Helm chart. See UP_COMMAND section

UP_COMMAND

	USAGE

		$progname up [--namespace,-n NAMESPACE] [--values-file,-f VALUES_FILE] CHART_PATH
		
	ARGUMENTS

		CHART_PATH    Path to Helm chart

	OPTIONS

		--namespace,-n NAMESPACE        Namespace to deploy resources in
		--values-file,-f VALUES_FILE    Additional Helm values file. This arugment can
		                                be provided multiple times.

DEPENDENCIES

	The helm and kubectl executables must be present.
EOF

	exit 1
fi

# Check for dependencies
if ! which helm &> /dev/null; then
	echo "Error: helm executable must be in path" >&2
	exit 1
fi

if ! which kubectl &> /dev/null; then
	echo "Error: kubectl executable must be in path" >&2
	exit 1
fi

# Deploy Helm chart
#
# ARGUMENTS
#
#	1. CHART_PATH      Path to Helm chart
#	2. NAMESPACE       (Optional) Namespace to deploy resources to
#	3. VALUES_FILES    (Optional) Additional Helm values file locations
#	                   separated by spaces
up_command() {
	# Check arguments
	# ... CHART_PATH
	if [ -z "$1" ]; then
		echo "Error: CHART_PATH argument must be provided" >&2
		exit 1
	fi
	chart_path="$1"

	if [ ! -d "$chart_path" ]; then
		echo "Error: CHART_PATH argument must point to a directory which exists" >&2
		exit 1
	fi

	# ... NAMESPACE
	kubectl_args=""
	if [ ! -z "$2" ]; then
		kubectl_args="$kubectl_args --namespace $2"
	fi

	# ... VALUES_FILES
	helm_args=""
	if [ ! -z "$3" ]; then
		values_files=("$3")
		for values_file in "${values_files[@]}"; do
			helm_args="$helm_args -f $values_file"
		done
	fi

	# Render Helm templates
	templates=$(helm template "$helm_args" "$chart_path")

	if [[ "$?" != "0" ]]; then
		echo "Error: Failed to render Helm templates" >&2
		exit 1
	fi

	# Deploy
	echo "$templates" | kubectl apply "$kubectl_args" -f -

	if [[ "$?" != "0" ]]; then
		echo "Error: Failed to deploy" >&2
		exit 1
	fi
}

# Run command
case "$1" in
	up)
		cmd="up"
		
		shift

		while [ ! -z "$1" ]; do
			case "$1" in
				--namespace|-n)
					shift
					up_namespace="$1"
					shift
					;;

				--values-file,-f)
					shift
					up_values_files="$up_values_files $1"
					shift
					;;

				*)
					up_chart_path="$1"
					shift
					;;
			esac
		done

		up_command "$up_chart_path" "$up_namespace" "$up_values_files"
		;;
	
	*)
		echo "Error: Unknown command \"$1\"" >&2
		exit 1
		;;
esac
